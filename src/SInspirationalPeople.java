
import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JComboBox;
import javax.swing.JLabel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JTextArea;
import javax.swing.JScrollPane;

/**
* The SInspirationalPeople program implements an application that
* simply displays  information about three  Inspirational People to the form when clicked..
*
* @author  RR
* @version 1.0
* @since   2016-12-22 
*/
public class SInspirationalPeople extends JFrame {
	private static Connection connection = getConnection();
	private static ResultSet results;
	private JPanel contentPane;
	private static JComboBox comboBox;
	private static JTextArea paragraphtextArea;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					SInspirationalPeople frame = new SInspirationalPeople();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	/**
	 * Create the frame.
	 * add panel, jcomboBox, jTextArea
	 */
	public SInspirationalPeople() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);

		JPanel cmbopanel = new JPanel();
		JLabel personlbl = new JLabel("Person");

		comboBox = new JComboBox();
		fillComboBox();

		comboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e1) {
				fillTextArea();
			}
		});
		// code generated by windows builder
		GroupLayout gl_cmbopanel = new GroupLayout(cmbopanel);
		gl_cmbopanel.setHorizontalGroup(
			gl_cmbopanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_cmbopanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_cmbopanel.createParallelGroup(Alignment.TRAILING)
						.addGroup(gl_cmbopanel.createSequentialGroup()
							.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, 83, GroupLayout.PREFERRED_SIZE)
							.addGap(38))
						.addComponent(personlbl))
					.addContainerGap(187, Short.MAX_VALUE))
		);
		gl_cmbopanel.setVerticalGroup(
			gl_cmbopanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_cmbopanel.createSequentialGroup()
					.addGap(22)
					.addGroup(gl_cmbopanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_cmbopanel.createSequentialGroup()
							.addGap(3)
							.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addComponent(personlbl))
					.addContainerGap(23, Short.MAX_VALUE))
		);

		JScrollPane scrollPane = new JScrollPane();

		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane
				.setHorizontalGroup(gl_contentPane
						.createParallelGroup(Alignment.LEADING)
						.addGroup(
								gl_contentPane
										.createSequentialGroup()
										.addGroup(
												gl_contentPane
														.createParallelGroup(
																Alignment.LEADING)
														.addComponent(
																cmbopanel,
																GroupLayout.PREFERRED_SIZE,
																424,
																GroupLayout.PREFERRED_SIZE)
														.addGroup(
																gl_contentPane
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				scrollPane,
																				GroupLayout.PREFERRED_SIZE,
																				328,
																				GroupLayout.PREFERRED_SIZE)))
										.addContainerGap(0, Short.MAX_VALUE)));
		gl_contentPane.setVerticalGroup(gl_contentPane.createParallelGroup(
				Alignment.LEADING).addGroup(
				gl_contentPane
						.createSequentialGroup()
						.addComponent(cmbopanel, GroupLayout.PREFERRED_SIZE, 57,
								GroupLayout.PREFERRED_SIZE)
						.addGap(18)
						.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE,
								150, Short.MAX_VALUE).addContainerGap()));

		paragraphtextArea = new JTextArea();
		paragraphtextArea.setLineWrap(true);
		scrollPane.setViewportView(paragraphtextArea);
		contentPane.setLayout(gl_contentPane);
	}
	
	/**
	 * fills the comboBox with inspirational people's list.
	 *@throws SQLException if it cannot connect to the database and execute the query.
	 */
	public static void fillComboBox() {
		try {
			Statement statement = connection.createStatement();
			results = statement.executeQuery("Select PeopleName from people  ");
			while (results.next()) {
				String peopleName = results.getString("PeopleName");
				comboBox.addItem(peopleName);
			}
		} catch (SQLException e) {
		 	e.printStackTrace();
		}
	}
	
	/**
	 *  upon choosing  a person from the comboBox list this method displays information of the person chosen
	 * @throws SQLException if it cannot connect to the database and execute the query.
	 */
	public static void fillTextArea() {
		String choice = (String) comboBox.getSelectedItem();
		Statement statement;
		try {
			statement = connection.createStatement();
			results = statement
					.executeQuery("Select People.PeopleName,paragraph.text  "
							+ "From People " + "inner join paragraph "
							+ "on People.peopleKey=paragraph.peopleKey "
							+ "where PeopleName = '" + choice + "'");

			paragraphtextArea.setText("");
			paragraphtextArea.setEditable(true);
			while (results.next()) {
				paragraphtextArea.append(results.getString("text"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * this method connects to derby database and gets the connection
	 * @return Connection
	 * @throws SQLException if it cannot connect to the database
	 */
	public static Connection getConnection() {
		Connection connection = null;
		try {
			String dbDirectory = "C:/Users/MAX-Student/Desktop/java/db";
			System.setProperty("derby.system.home", dbDirectory);

			// set the db url, username, and password
			String url = "jdbc:derby:InspirationalDB";
			String username = "";
			String password = "";

			connection = DriverManager.getConnection(url, username, password);
			return connection;
			} catch (SQLException e) {
			for (Throwable t : e)
				t.printStackTrace(); // for debugging
			return null;
		   }
	}
}
